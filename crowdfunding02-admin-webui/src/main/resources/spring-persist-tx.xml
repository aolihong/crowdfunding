<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 声明式事务 -->
	<!-- 由spring来全面接管数据库事务，用声明式代替编程式 -->

	<!-- 内容包括 
	（1）开启注解扫描（为指定的包进行注解扫描） 
		【这个其实与本次事务配置关系不大，应该也可以写在spring-persist-mybatis.xml文件中
		但是和spring-persist-mybatis.xml文件中内容也关系更不大，所以就写在此spring事务配置文件中】
	（2）配置事务管理器——DataSourceTransactionManager类 
	（3）配置AOP进行面向切面编程 
	（4）配置事务属性
		【事务属性：1.传播行为
				 2.隔离级别
				 3.回滚异常
				 4.只读属性
				 5.超时属性】 -->


	<!-- （1）开启注解扫描**************************************************** -->
	<!-- 把Service对象扫描到IOC容器中 -->
	<context:component-scan base-package="com.aolhon.crowd.service"></context:component-scan>


	<!-- （2）配置事务管理器************************************************** -->
	<!-- （其实就是一个实例化一个类）一定要记住类名，因为事务是与数据库有关系所以事务管理器的类名有DataSource DataSourceTransactionManager 
		还要记住 还要给这个事务管理器（DataSourceTransactionManager类）注入属性（装配属性）dataSource -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>


	<!-- （3）配置AOP进行面向切面编程******************************************* -->
	<!-- -->
	<aop:config>
		<!-- 配置切入点表达式 -->
		<!-- 就是来指定 哪个具体类 或者 哪些类 来可以被增强 -->
		<!-- 举例：public String com.aolhon.crowd.service.AdminService.getXxx(Integer 
			id) -->
		<aop:pointcut expression="execution(* *..*ServiceImpl.*(..))"
			id="txpointCut" />

		<!-- 将事务通知 和 切入点表达式 关联到一起 -->
		
			<!-- 切入点表达式：就是指定需要切入的方法的相关信息
			（包括 访问修饰符  + 返回值类型 + 全类名 .方法名 + 参数列表） 
				虽然切入点表达式能定位到具体的XxxService方法了，但是仍然需要下面的事务属性配置中name属性，不然事务是无法生效的-->
			
			<!-- 事务通知：个人理解就是我们配置的事务属性
			（包括 需要配置事务的方法名（这里的配置还没有指定具体方法的包名，就光说明了方法名） 和 一些事务属性） -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txpointCut" />
	</aop:config>


	<!-- （4）配置事务属性******************************************* -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>


			<!-- name属性指定当前要配置的事务方法的方法名 -->
			<!-- 查询方法名称一般我们取名为getXxx/queryXxx/findXxx/countXxx -->
			<!-- 增删改方法的名称我们一般取名为 saveXxx/removeXxx/updateXxx-->

			<!-- DQL查询的方法################################################# -->

			<!-- 查询方法通常设置为只读，便于数据库进行相关的优化 -->
			
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="count*" read-only="true" />


			<!-- DML增删改的方法################################################# -->
			
			<!-- propagation 属性配置事务方法的传播行为 -->
			<!-- 默认值：REQUIRED 表示：当前方法必须运行在事务中，如果没有事务，则开 启事务，在自己的事务中运行。如果已经有了已开启的事务，则在当前事务中运行。有可能 
				和其他方法共用同一个事务。 --> <!-- 建议值：REQUIRES_NEW 表示：当前方法必须运行在事务中，如果没有事务， 则开启事务，在自己的事务中运行。和 REQUIRED 
				的区别是就算现在已经有了已开启的事务， 也一定要开启自己的事务，避免和其他方法共用同一个事务。 -->
			
			<!-- rollback-for 属性配置回滚的异常 （就是当出现什么异常才进行回滚）-->
			<!-- 默认值 ：运行时异常——RuntimeException-->
			<!-- 常用值：运行时异常+编译时异常——Exception -->
			
			<tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			<tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
			
		</tx:attributes>
		
	</tx:advice>

</beans>