<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
		
	<!-- springmvc配置文件 -->
	
	<!-- 包括
			（1）开启上下文注解扫描【把控制器对象扫描到IOC容器组件中】
			（2）注册内部资源视图解析器 
			（3）开启mvc注解驱动
                【可选】（4）基于xml配置异常映射
                                （5）注册拦截器类-->
	
	<!-- （1）开启上下文注解扫描**************************************************** -->
	<context:component-scan base-package="com.aolhon.crowd.mvc"></context:component-scan>
	
	
	<!-- （2）注册内部资源视图解析器 **************************************************** -->
	<bean id="" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	
	<!-- （3）开启mvc注解驱动 **************************************************** -->	
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- （4）基于xml配置异常映射 **************************************************** -->
 	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- key属性：异常类型（异常类的全类名）
				文本标签体中是指定异常页面对应的逻辑视图名（会经过内部资源视图解析器 添加前缀 添加后缀） -->
				<!-- <prop key="java.lang.Exception">system-error</prop> -->
				<prop key="com.aolhon.crowd.exception.AccessForbiddenException">admin-login</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置view-controller，直接把请求地址 和 视图名称关联起来，可以不必写处理器方法
		此方法也主要针对于 没有输入输出数据的情景-->
		
	<mvc:view-controller path="/admin/to/login/page.html" view-name="admin-login"/>
	<!-- 相当于以下这个处理器方法
		@RequestMapping(/admin/do/login/page.html)
		public String toLoginPage(){
			return "admin-login";
			}
 		-->
 	<mvc:view-controller path="/admin/to/login/page.html" view-name="admin-login"/>	
 	<mvc:view-controller path="/admin/to/main/page.html" view-name="admin-main"/>
 	<mvc:view-controller path="/admin/to/add/page.html" view-name="admin-add"/>
 	<mvc:view-controller path="/role/to/page.html" view-name="role-page"/>
 	<mvc:view-controller path="/menu/to/page.html" view-name="menu-page"/>
		
	<!-- （5）注册拦截器类 **************************************************** -->
<!-- <mvc:interceptors>
	<mvc:interceptor>
		配置要拦截的资源
		<mvc:mapping path="/**" />

		配置不需要拦截的资源
		<mvc:exclude-mapping path="/admin/to/login/page.html" />
		<mvc:exclude-mapping path="/admin/do/login.html" />
		<mvc:exclude-mapping path="/admin/do/logout.html" />

		配置拦截器类：就是我们自己定义的拦截器类
		<bean class="com.aolhon.crowd.mvc.interceptor.LoginInterceptor"></bean>
	</mvc:interceptor>
</mvc:interceptors>  -->
</beans>